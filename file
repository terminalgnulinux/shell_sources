#!/bin/bash

declare __LIBRARY_FILE="$PWD/file"
declare __LIBRARY_FILENAME=file

declare -a __FILE_ERROR=(
	[0]="%s: Erro: '%s' arquivo não existe\r\n"
	[1]="%s: Erro: '%s' Requer argumento\r\n"
	[2]="%s: Erro: '%s' número de argumento(s) inválido\r\n"
	[3]="%s: Erro: %s: '%s' argumento(s) inválido\r\n"
	[4]="%s: Erro: %s: '%s' arquivo ou diretório não existe.\r\n"
	[5]="%s: Erro: %s: '%s' é um diretório\r\n"
	[6]="%s: Erro: Falha ao tentar ler a biblioteca\r\n"
	[10]="%s: Erro: %s: '%s' Sintaxe erro.\r\n"
	[11]="%s: Erro: %s: '%s' Argumento inválido.\r\n"
) 

function file.__FUNCTIONS__()
{
	declare -a __FILE_FUNCTIONS__=(
		[0]="file.exists"
		[1]="file.isfile"
		[2]="file.isdir"
		[3]="file.size"
		[4]="file.sizecmp"
		[5]="file.owner"
		[6]="file.getpermission"
		[7]="file.getpath"
		[8]="file.getfilename"
		[9]="file.getfiletype"
		[10]="file.getlastaccess"
	)

	echo "${__FILE_FUNCTIONS__[@]}" | sed 's/[[:space:]]/, /g' 
}

function file.__HELP__()
{
	declare __Function__
	declare __Sintax__
	declare __Description__
	declare __Return_Value__
	
	if [ ${#@} -eq 0 ]
	then
		printf "${__FILE_ERROR[1]}" $__LIBRARY_FILENAME $FUNCNAME && return 1
	else
		case "$1" in
			file.exists)
				__Function__=$1
				__Sintax__="$__function__ '[arquivo|diretorio]'"
				__Description__="Verifica se o arquivo ou diretório existe."
				__Argument__="Nenhum"
				__Return_Value__="(true|false)"
				;;
			file.isfile)
				__Function__=$1
				__Sintax__="$__function__ '[arquivo]'"
				__Description__="Verifica se é arquivo."
				__Argument__="Nenhum"
				__Return_Value__="(true|false)"
				;;
			file.isdir)
				__Function__=$1
				__Sintax__="$__function__ '[diretorio]'"
				__Description__="Verifica se é diretório."
				__Argument__="Nenhum"
				__Return_Value__="(true|false)"
				;;
			file.size)
				__Function__=$1
				__Sintax__="$__function '[arquivo,format]'"
				__Description__="Exibe o tamanho do arquivo no formato especificado."
				__Argument__="format = human, bytes"
				__Return_Value__="(Size)"
				;;
			*)
				echo "$__LIBRARY_FILENAME: '$1' função não encontrada."
				return 0
				;;
		esac
		
		echo "Biblioteca: $__LIBRARY_FILENAME"
		echo "Função: $__Function__"
		echo "Sintaxe: $__Sintax__"
		echo "Descrição: $__Description__"
		echo "Argumento(s): $__Argument__"
		echo "Retorno: $__Return_Value__"
	fi
	
	return 0
		
}


function file.exists()
{
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p')"
	declare __FileName

	if [ -n "$__FuncSintax" ]
	then
		__FileName="$(echo "$1" | tr -d '[]')"
	
		[[ -e "$__FileName" ]] && echo true || echo false
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$1"
		return 1
	fi
	
	return 0
}	

function file.isfile()
{
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p')"
	declare __FileName

	if [ -n "$__FuncSintax" ]
	then
		__FileName="$(echo "$1" | tr -d '[]')"
		
		if [ $(file.exists "[$__FileName]") == true ] 
		then
			[[ -f "$__FileName" ]] && echo true || echo false
		else
			printf "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName"
			return 1
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName"
		return 1
	fi
	
	return 0
}

function file.isdir()
{
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p')"
	declare __DirName

	if [ -n "$__FuncSintax" ]
	then
		__DirName="$(echo "$1" | tr -d '[]')"
		
		if [ $(file.exists "[$__DirName]") == true ] 
		then
			[[ -d "$__DirName" ]] && echo true || echo false
		else
			printf "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__DirName"
			return 1
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__DirName"
		return 1
	fi
	
	return 0
}

function file.size()
{
	#declare __FuncSintax="$(echo "${@}" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+[,]\{1\}\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p')"
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+[,]\{1\}\+[a-z]\+\]\{1\}$/p' | tr -d '[]')"
	declare __FileName
	declare __Argument1
	declare __Exec="du --summarize"
	declare __StrArgs

	if [ -n "$__FuncSintax" ]
	then
		__FileName="$(echo "$__FuncSintax" | cut -d',' -f1)"
		__Argument1="$(echo "$__FuncSintax" | cut -d',' -f2)"
		
		case "$__Argument1" in
			bytes)
				__StrArgs='--bytes'
				;;
			human)
				__StrArgs='--human-readable'
				;;
			*)
				printf "${__FILE_ERROR[11]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__Argument1"
				return 1
				;;	
		esac
	
		__Exec="$__Exec $__StrArgs $__FileName"
	
		if [ $(file.exists "[$__FileName]") == true ] 
		then
			eval "$__Exec" 2>/dev/null | awk '{print $1}'
		else
			printf "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName"
			return 1
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "${@}"
		return 1
	fi
	
	return 0
	
}

function file.sizecmp()
{
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+[,]\{1\}\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p' | tr -d '[]')"
	declare __FileName1="$(echo "$__FuncSintax" | cut -d',' -f1)"
	declare __FileName2="$(echo "$__FuncSintax" | cut -d',' -f2)"

	if [ -n "$__FuncSintax" ]
	then
		if [ $(file.exists "[$__FileName1]") == false ]
		then
			printf  "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName1"
			return 1
		elif [ $(file.exists "[$__FileName2]") == false ]
		then
			printf  "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName2"
			return 1
		else	
			[[ $(file.size "[$__FileName1,bytes]") -eq $(file.size "[$__FileName2,bytes]") ]] && echo true || echo false
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "${@}"
		return 1
	fi

	return 0
}

function file.owner()
{
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p' | tr -d '[]')"
	declare __FileName

	if [ -n "$__FuncSintax" ]
	then
		__FileName="$__FuncSintax"
		
		if [ $(file.exists "[$__FileName]") == true ] 
		then
			getfacl --tabular --absolute-names "$__FileName" | awk '/USER/ {print $2}' 2>/dev/null
		else
			printf "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName"
			return 1
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "${@}"
		return 1
	fi
	
	return 0
}

function file.getpermission()
{

	declare __Bit=1
	declare __TempPerm=0
	declare __Owner
	declare __Permission
	declare __Bit
	declare __Decimal_Permission
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p' | tr -d '[]')"
	declare __FileName

	if [ -n "$__FuncSintax" ]
	then
		__FileName="$__FuncSintax"
		
		if [ $(file.exists "[$__FileName]") == true ] 
		then
			for __Owner in "USER" "GROUP" "OTHER"
			do
				__Permission=$(getfacl --absolute-names "$__FileName" 2>/dev/null | grep -i "^$__Owner" | egrep -o "[rwx-]{,3}$")
	
				for __Col in {3..1}
				do
					__TempPerm=$((__TempPerm + $(echo $__Permission | cut -c$__Col | sed -e "s/[rwx]/$__Bit/;s/-/0/")))
					__Bit=$((__Bit*2))
				done
		
				__Decimal_Permission=$__Decimal_Permission$__TempPerm
				__Bit=1 
				__TempPerm=0
			done
		
			echo $__Decimal_Permission
		else
			printf  "${__FILE_ERROR[4]}" $__LIBRARY_FILENAME $FUNCNAME "$__FileName"
			return 1
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "${@}"
		return 1
	fi
	
	return 0
}

function file.getpath()
{
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p' | tr -d '[]')"
	declare __FileName

	if [ -n "$__FuncSintax" ]
	then
		__FileName="$__FuncSintax"
		
		if [ $(file.exists "[$__FileName]") == true ] 
		then
			dirname "$__FileName"
		else
			printf "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName"
			return 1
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "${@}"
		return 1
	fi
	
	return 0
}

function file.getfilename()
{
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p' | tr -d '[]')"
	declare __FileName

	if [ -n "$__FuncSintax" ]
	then
		__FileName="$__FuncSintax"
		
		if [ $(file.exists "[$__FileName]") == true ] 
		then
			basename "$__FileName"
		else
			printf "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName"
			return 1
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "${@}"
		return 1
	fi
	
	return 0

}

function file.getfiletype()
{
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+\]\{1\}$/p' | tr -d '[]')"
	declare __FileName

	if [ -n "$__FuncSintax" ]
	then
		__FileName="$__FuncSintax"
		
		if [ $(file.exists "[$__FileName]") == true ] 
		then
			file --mime-type "$__FileName" | awk '{print $2}' | cut -d'/' -f2 2>/dev/null 
		else
			printf "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName"
			return 1
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "${@}"
		return 1
	fi
	
	return 0
	
}

function file.getlastaccess()
{
	declare __FileName
	declare __FuncSintax="$(echo "$1" | sed -n '/^\[\+[a-zA-Z0-9 \/.;+_-]\+[,]\{1\}\+[a-z]\+\]\{1\}$/p' | tr -d '[]')"
	declare __Argument1
	declare __Args

	if [ -n "$__FuncSintax" ]
	then
		__FileName="$(echo "$__FuncSintax" | cut -d',' -f1)"
		__Argument1="$(echo "$__FuncSintax" | cut -d',' -f2)"
		
		case "$__Argument1" in
			fulltime)
				__Args='1,2'
				;;
			date)
				__Args='1'
				;;
			hour)
				__Args='2'
				;;
			*)
				printf "${__FILE_ERROR[11]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__Argument1"
				return 1
				;;
		esac
			
		
		if [ $(file.exists "[$__FileName]") == true ] 
		then
			ls --full-time  "$__FileName" | awk '{print $6,$7}' | cut -d'.' -f1 | cut -d' ' -f$__Args
		else
			printf "${__FILE_ERROR[4]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "$__FileName"
			return 1
		fi
	else
		printf "${__FILE_ERROR[10]}" "$__LIBRARY_FILENAME" "$FUNCNAME" "${@}"
		return 1
	fi
	
	return 0
	
}


