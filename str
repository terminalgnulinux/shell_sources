#!/bin/bash

# -----------------------------------------------------------------------------
#   Biblioteca: str (string)
#   Criado por: x_SHAMAN_x
#   Data: 10 de Julho de 2016
#  
#   A biblioteca contém funções para manipulação de strings e expressões,
#   no intuito de agilizar a automatizar o tratamento de cadeias de 
#	caracteres para diversas situações.
#   Seguindo um conceito de nomenclatura biblioteca.<função> para organização;
#	deixando o código legível e de fácil compreensão
#
#   Funções:
#
#   str.len, str.rev, str.split, str.replace, str.asc, str.chr, str.format
#	str.instr, str.tolower, str.toupper, str.left, str.right, str.comp,
#	str.dup, str.mod, str.cat, str.align
#
#   DOC:
#
#   A documentação da biblioteca está contida no arquivo 'str.hlp' no
#   diretório 'src'.
# ------------------------------------------------------------------------------

# Importa biblioteca de documentação
source me

# Nome da biblioteca 
export __STR_NAME__=str

# Array com nome das funções
export -a __STR_LIST__=(str.len
str.rev
str.split
str.replace
str.asc
str.chr
str.format
str.instr
str.tolower
str.toupper
str.left
str.right
str.comp
str.dup
str.mod
str.cat
str.align
)


# Tabela ASCII
# Lista dos caracteres, onde o índice dos Vetores é a representação decimal de cada caracter.
export -a __ASCII=(
[0]='Null' [1]='SOH' [2]='STX' [3]='ETX' [4]='EOT' [5]='ENQ' [6]='ACK' [7]='BEL' [8]='BS' [9]='HT' [10]='LF' [11]='VT' [12]='FF' [13]='CR' [14]='SO' [15]='SI' [16]='DLE' [17]='D1' [18]='D2' [19]='D3' [20]='D4' [21]='NAK' [22]='SYN' [23]='ETB' [24]='CAN' [25]='EM' [26]='SUB' [27]='ESC' [28]='FS' [29]='GS' [30]='RS' [31]='US' [32]=' ' [33]='!' [34]='“' [35]='#' [36]='$' [37]='%' [38]='&' [39]='‘' [40]='(' [41]=')' [42]='*' [43]='+' [44]=',' [45]='–' [46]='.' [47]='/' [48]='0' [49]='1' [50]='2' [51]='3' [52]='4' [53]='5' [54]='6' [55]='7' [56]='8' [57]='9' [58]=':' [59]=';' [60]='<' [61]='=' [62]='>' [63]='?' [64]='@' [65]='A' [66]='B' [67]='C' [68]='D' [69]='E' [70]='F' [71]='G' [72]='H' [73]='I' [74]='J' [75]='K' [76]='L' [77]='M' [78]='N' [79]='O' [80]='P' [81]='Q' [82]='R' [83]='S' [84]='T' [85]='U' [86]='V' [87]='W' [88]='X' [89]='Y' [90]='Z' [91]='[' [92]='\' [93]=']' [94]='^' [95]='_' [96]='`' [97]='a' [98]='b' [99]='c' [100]='d' [101]='e' [102]='f' [103]='g' [104]='h' [105]='i' [106]='j' [107]='k' [108]='l' [109]='m' [110]='n' [111]='o' [112]='p' [113]='q' [114]='r' [115]='s' [116]='t' [117]='u' [118]='v' [119]='w' [120]='x' [121]='y' [122]='z' [123]='{' [124]='|' [125]='}' [126]='~' [127]='Delete' [128]='Ç' [129]='ü' [130]='é' [131]='â' [132]='ä' [133]='à' [134]='å' [135]='ç' [136]='ê' [137]='ë' [138]='è' [139]='ï' [140]='î' [141]='ì' [142]='Ä' [143]='Å' [144]='É' [145]='æ' [146]='Æ' [147]='ô' [148]='ö' [149]='ò' [150]='û' [151]='ù' [152]='ÿ' [153]='Ö' [154]='Ü' [155]='ø' [156]='£' [157]='Ø' [158]='×' [159]='ƒ' [160]='á' [161]='ù' [162]='ó' [163]='ú' [164]='ñ' [165]='Ñ' [166]='ª' [167]='º' [168]='¿' [169]='®' [170]='¬' [171]='½' [172]='¼' [173]='¡' [174]='«' [175]='»' [176]='░' [177]='▒' [178]='▓' [179]='│' [180]='┤' [181]='Á' [182]='Â' [183]='À' [184]='©' [185]='╣' [186]='║' [187]='╗' [188]='╝' [189]='¢' [190]='¥' [191]='┐' [192]='└' [193]='┴' [194]='┬' [195]='├' [196]='─' [197]='┼' [198]='ã' [199]='Ã' [200]='╚' [201]='╔' [202]='╩' [203]='╦' [204]='╠' [205]='═' [206]='╬' [207]='¤' [208]='ð' [209]='Ð' [210]='Ê' [211]='Ë' [212]='È' [213]='ı' [214]='Í' [215]='Î' [216]='Ï' [217]='┘' [218]='┌' [219]='█' [220]='▄' [221]='¦' [222]='Ì' [223]='▀' [224]='Ó' [225]='ß' [226]='Ô' [227]='Ò' [228]='õ' [229]='Õ' [230]='µ' [231]='þ' [232]='Þ' [233]='Ú' [234]='Û' [235]='Ù' [236]='ý' [237]='Ý' [238]='¯' [239]='´' [240]='­­' [241]='±' [242]='‗' [243]='¾' [244]='¶' [245]='§' [246]='÷' [247]='¸' [248]='°' [249]='¨' [250]='·' [251]='¹' [252]='³' [253]='²' [254]='■' [255]=''
)

function error_exit()
{
	# error_exit biblioteca linha função mensagem
	# Se a mensagem de erro não for passada em '$3', exibe a mensagem default
	echo "$__STR_NAME__: linha $1: $2: ${3:-"Sintaxe erro."}" 1>&2
	exit 1
}

function str.len()
{
	# str.len expressão
	# Se o número de argumentos for maior que 1, chama 'error_exit'
	[ ${#@} -gt 1 ] && 	error_exit $BASH_LINENO $FUNCNAME
	
	# Imprime comprimento da string
	echo ${#1}

	# status
	return 0
}

function str.rev()
{
	# str.rev expressão

	# Se o argumento for nulo, chama 'error_exit'
	# Se o número de argumentos for maior que 1, chama 'error_exit'
	if [ ${#@} -gt 1 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "String requerida."
	fi  
	
	# Imprime
	echo -e "$1" | rev 	

	# status
	return 0
}

function str.split()
{

	# str.split expressão delimitador comparação variavel

	# Variaveis locais
	local __CompareType=$3
	local __Delimiter

	# Default
	__CompareType=${__CompareType:-"text"}
	
	# Verifica se expressão não é nula e o delimitador é caractere único.
	
	# Checa o número de argumentos passado com a função.
	# Se for maior que 4, sai da função
	if [ ${#@} -gt 4 -o ${#@} -eq 0 ]; then
			error_exit $BASH_LINENO $FUNCNAME

	# Verifica se a expressão é nula
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão requerida."

	# Checa se o delimitador não é nulo e se é um caractere único.
	elif [ -n "$2" -a ${#2} -gt 1 ]; then
		error_exit $BASH_LINENO $FUNCNAME "'$2' O delimitador deve ser um único caractere."
	
	# Verifica o método de comparação é válido
	# Se for omitido assume 'text' como padrão
	elif [ "$__CompareType" == "binary" ]; then
			__CompareType=''
	elif [ "$__CompareType" == "text" ]; then
			__CompareType='I'
	else
		# Se o método for inválido sai da função.
		error_exit $BASH_LINENO $FUNCNAME "'$__CompareType' Método de comparação inválido."
	fi

	# Checa se o nome da variavel foi passada na função.
	if [ -z "$4" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Requer variável."
	fi

	# Se delimitador for omitido, aplica 'espaço' como delimitador padrão	
	__Delimiter=${2:-' '}
	
	# Monta a estrutura do array, separando os campos pelo seu delimitador, atribui a estrutura
	# a variavel passada em '$4' e executa a estrutura para alocação dos elementos.
	if ! eval $4=$(echo "$1" | sed "s/^/(\"/;s/$/\")/;s/$__Delimiter/\" \"/$__CompareType g") 2>/dev/null; then
			error_exit $BASH_LINENO $FUNCNAME
	fi

	# status
	return 0
	
}

function str.replace()
{
	# Variavel local
	# Receberá o metodo de busca 
	local __CompareType=$4
	
	# default
	__CompareType=${__CompareType:-"text"}
	
	# str.replace expressão procura substituição metodo
	
	# Verifica a quantidade de argumentos passados a função é superior a '4'. Se for, sai da função
	# Checa se todos os argumentos obrigatórios foram passados.
	# De todos o único que é opcional é o argumento 'metodo' que omitido assume o padrão 'text'
	# ignorando a diferença entre maiúsculas e minúsculas.
	if [ ${#@} -gt 4 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then											
		error_exit $BASH_LINENO $FUNCNAME "Requer expressão."
	elif [ -z "$2" ]; then 
		error_exit $BASH_LINENO $FUNCNAME "Requer expressão a ser substituida."
	elif [ -z "$3" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Requer expressão de substituição."
	elif [ "$__CompareType" == "text" ]; then
		__CompareType='I'
	elif [ "$__CompareType" == "binary" ]; then
		__CompareType=''
	else
		error_exit $BASH_LINENO $FUNCNAME "'$__CompareType' Método de comparação inválido."
	fi

	# Aplica a substituição e imprime na saida. 
	echo "$1" | sed "s/$2/$3/$__CompareType g"
	
	# status
	return 0	
		
}

function str.asc()
{
	#str.asc caractere
	# Variavel local
	local __Code
	
	# Se o número de argumentos for maior que '1' sai da função
	if [ ${#@} -gt 1 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	# Checa se é um único caractere
	elif [ ${#1} -gt 1 ]; then
		error_exit $BASH_LINENO $FUNCNAME "'$1' Deve ser um único caractere."
	fi

	# Lẽ o indice dos elementos em ASCII
	for __Code in $(seq 0 $((${#__ASCII[@]}-1)))
	do
		# Compara o 'caractere' passado na função com o 'caractere' contido no 'Code' do elementro do array em ASCII
		# Se for iguais imprime a posição do elemento e finaliza o loop
		# A posição do elemento é igual ao código decimal do caractere na tabela ASCII
		if [ "$1" == "${__ASCII[$__Code]}" ]; then
			echo $__Code
			break
		fi
	done

	# status
	return 0
}

function str.chr()
{
	# str.chr codigo_caractere
	# Se o número de argumentos for maior que '1' sai da função
	if [ ${#@} -gt 1 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	# Verifica se o argumento é um inteiro
	elif [[ "$1" != ?(+|-)+([0-9]) ]]; then
		error_exit $BASH_LINENO $FUNCNAME "'$1' Deve ser um inteiro."
	fi
	
	# Imprime o caractere contido no indice 'code'
	echo ${__ASCII[$1]}

	# status
	return 0
	
}

function str.format()
{
	# str.format expressão formato
	# Variaveis locais
	local __StrSwap __Vetor1 __Vetor2

	# Sai da função se o número de argumentos for superior a 2	
	# Checa se os argumentos obrigatórios foram omitidos.
	if [ ${#@} -gt 2 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão não pode ser nula."
	elif [ -z "$2" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Formato não pode ser nulo."
	fi
				
	# Lẽ o tamanho do indice de 'formato'
	for __Vetor2 in $(seq 0 $((${#2}-1)))
	do
		# Se o caractere da posição 'Vetor2' em $2 for igual "#" incrementa a variavel 'StrSwap' com o caractere da posição 'Vetor1' em '$1'
		# substituindo o caractere "#" pelo pelo caractere na posição "Vetor1" em '$1"
		# Incrementa o valor de 'Vetor1' para leitura do próximo caractere.
		
		# Se elemento na posição 'Vetor1' estiver vazio, incrementa "Vetor1"	
		if [ "${1:$__Vetor1:1}" == " " ]; then
			 ((__Vetor1++))
		elif [ "${2:$__Vetor2:1}" == "#" ]; then
			    __StrSwap+="${1:$__Vetor1:1}"
				((__Vetor1++))
				# Faz um salto no loop para o próximo elemento.
				continue
		fi

		# Caractere diferente de "#" incrementa 'StrSwap' com elemento da posição 'Vetor2' em '$2'
		__StrSwap+="${2:$__Vetor2:1}"
	done 	

	# Imprime	
	echo $__StrSwap

	# status
	return 0
}

function str.instr()
{
	# str.instr caractere expressão metodo
	
	# Inicia a variavel com valor -1.
	# -1 refere-se a ocorrência não encontrada.
	local __PosMatch=-1
	local __clower __cupper __Vetor
	local __CompareType=$3

	# Default
	__CompareType=${__CompareType:-"text"}

	# Sai da função se o número de argumentos for superior a 2	
	# Checa se os argumentos obrigatórios foram omitidos.
	if [ ${#@} -gt 3 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ ${#1} -gt 1 ]; then
		error_exit $BASH_LINENO $FUNCNAME "'$1' Deve ser um único caractere."
	elif [ -z "$2" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão não pode ser nula."
	# Se método for 'text', converte o caractere passado na função para o oposto da sua formação
	# [a-z] -> [A-Z] ou [A-Z] -> [a-z], alocando-o na variavel.
	# Descrição:
	# 		a -> aA ou A -> Aa
	# Com essa conversão cria-se um filtro para ignorar a diferença de minúsculas para maiúsculas.
	elif [ "$__CompareType" == "text" ]; then
		__clower="$(echo $1 | tr '[:upper:]' '[:lower:]')"
		__cupper="$(echo $1 | tr '[:lower:]' '[:upper:]')"
	elif [ "$__CompareType" == "binary" ]; then
		# Armazena somente o caractere passado na função.
		__clower="$1"
	else
		error_exit $BASH_LINENO $FUNCNAME "'$__CompareType' Método de comparação inválido."
	fi
	
	# Lê o número de elementos contidos em '$2'
	for __Vetor in $(seq 0 $((${#2}-1)))
	do
		# Se o caractere na posição 'Vetor' em '$2' foi igual ao passado na função
		# armazena o valor de 'Vetor' em 'PosMatch', substituindo o valor -1
		# e sai do loop
		if [[ "${2:$__Vetor:1}" == ?($__clower|$__cupper) ]]; then
			__PosMatch=$__Vetor
			break
		fi
	done
	
	# Imprime a posição do elemento
	echo $__PosMatch

	# status
	return 0

}

function str.tolower()
{
	# str.tolower expressão

	# Verifica se o argumento foi passado para a função.
	if [ ${#@} -gt 1 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão não poder ser nula."
	fi		
	
	# Imprime a conversão 
	echo "$1" | tr '[:upper:]' '[:lower:]'
	
	# status
	return 0
			
}

function str.toupper()
{
	# str.tolower expressão

	# Verifica se o argumento foi passado para a função.
	if [ ${#@} -gt 1 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão não poder ser nula."
	fi		
	
	# Imprime a conversão 
	echo "$1" | tr '[:lower:]' '[:upper:]'
	
	# status
	return 0
			
}

function str.left()
{
	# str.left expressão comprimento

	# Se o comprimento for omitido, define o valor padrão.
	# Padrão: Comprimento total da expressão	
	local __Length=${2:-${#1}}
	
	# Verifica se o argumento foi passado para a função.
	if [ ${#@} -gt 2 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão não poder ser nula."
	# Checa se o argumento é um inteiro
	elif [[ "$__Length" != ?(+|-)+([0-9]) ]]; then
		error_exit $BASH_LINENO $FUNCNAME "'$2' Deve ser um inteiro."
	fi

	# Imprime
	echo "${1:0:$__Length}"
	
	# status
	return 0
}

function str.right()
{
	# str.left expressão comprimento

	# Se o comprimento for omitido, define o valor padrão.
	# Padrão: Comprimento total da expressão	
	local __Length=${2:-${#1}}
	
	# Verifica se o argumento foi passado para a função.
	if [ ${#@} -gt 2 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão não poder ser nula."
	# Checa se o argumento é um inteiro
	elif [[ "$__Length" != ?(+|-)+([0-9]) ]]; then
		error_exit $BASH_LINENO $FUNCNAME "'$2' Deve ser um inteiro."
	fi
	
	# Adiciona o sinal '-' para leitura reversa da expressão	
	__Length='-'$__Length

	# Imprime
	echo "${1: $__Length}"
	
	# status
	return 0
}

function str.comp()
{
	# str.comp string1 string2 metodo

	# Variavel local
	local __Str1 __Str2
	local __CompareType=$3

	# Default
	__CompareType=${__CompareType:-"text"}

	# Verifica o número de argumentos passados com a função. Se for maior que 3, sai da função.
	# Checa se a strings são nulas
	if [ ${#@} -gt 3 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" -o -z "$2" ]; then
		error_exit $BASH_LINENO $FUNCNAME "String não pode ser nula."
	elif [ "$__CompareType" == "text" ]; then
		# Método de comparação: 'text'
		# Realiza duas conversões de formatação nas strings contindas em ambos argumentos '$1' e '$2'
		# Fazendo com que ambas fiquem minúsculas e as diferenças entre formatações sejam eliminadas.
		# Exemplo:
		# 		__Str1="var"; __Str2="VAR"
		#
		#       __Str1:  var -> VAR -> var 
		#       __Str2:  VAR -> var -> var 
		#
		__Str1="$(echo "$1" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]')" 
		__Str2="$(echo "$2" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]')"
	elif [ "$__CompareType" == "binary" ]; then
		# Armazena as strings sem alterações
		__Str1="$1"
		__Str2="$2"
	else
		error_exit $BASH_LINENO $FUNCNAME "'$__CompareType' Método de comparação inválido."
	fi

	# Imprime 'true' ou 'false'	
	[[ "$__Str1" == "$__Str2" ]]  && echo true || echo false
	
	# status
	return 0	
}

function str.dup()
{
	# str.dup string numero
	
	# Variavel local
	# Se '$2' for omitido, define valor padrão
	# padrão: 1
	local __Number=${2:-1}
	local __Str __Cont
	
	# Verifica se o argumento foi passado para a função.
	if [ ${#@} -gt 2 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão não poder ser nula."
	# Checa se o argumento é um inteiro
	elif [[ "$__Number" != ?(+|-)+([0-9]) ]]; then
		error_exit $BASH_LINENO $FUNCNAME "'$2' Deve ser um inteiro."
	fi

	# Incrementa '__Str' com a expressão '__Number' vezes
	for ((__Cont=1; $__Cont <= $__Number; __Cont++)); do __Str+="$1"; done
		
	# Imprime
	echo $__Str	
	
	# status
	return 0
}

function str.mod()
{
	# str.mod expressao inicio comprimento

	# Variaveis locais
	# Padrão
	local __start=${2:-0}
	local __lenght=${3:-${#1}}

	# Checa os argumentos passados na função	
	if [ ${#@} -gt 3 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão não poder ser nula."
	fi

	# Imprime
	echo "${1:$__start:$__lenght}"

	# status
	return 0
	
}

function str.cat()
{
	# str.cat variavel expressão	
	# Verifica os argumentos da função.	
	if [ ${#@} -gt 2 -o ${#@} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Nome da variável não pode ser nula."
	fi

	# Concatena	
	eval $1+="'$2'"

	# status
	return 0
	
}

function str.align()
{
	# str.align expressao metodo comprimento

	# Armazena argumento 'comprimento'
	local __Column=$3
	# Se '__Column' estiver vazia, define o comprimento atual do terminal
	__Column=${__Column:-$(tput cols)}

	# Verifica o número de argumentos passados
	if [ ${#@} -gt 3 ]; then
		error_exit $BASH_LINENO $FUNCNAME
		# Valor de comprimento deverá ser um inteiro positivo maior que '3'
	elif [[ "$__Column" != ?(+)+([0-9]) || "$__Column" -lt 3 ]]; then
			error_exit $BASH_LINENO $FUNCNAME "'$3' Comprimento deve ser um inteiro positivo e maior que 2."
	elif [ -z "$1" ]; then
		error_exit $BASH_LINENO $FUNCNAME "Expressão não pode ser nula."
	elif [ "$2" == left -o -z "$2" ]; then
		# Alinhamento: A Esquerda (Padrão)
		# Apaga todos os espaços e tabulações no inicio da linha
		echo "$1" |	sed 's/\(^ \{2,\}\|\t\)//g'
	elif [ "$2" == right ]; then
		# Alinhamento: A Direita
		# Limpa a formatação da 'expressão' removendo todos os 'espaços multiplos consecutivos' e 'tabulações' do inicio e fim da linha
		# Insere espaços no inicio da 'expressão' até o número de substituições seja igual a '__Column'
		echo "$1" | sed 's/\(^ \{2,\}\|\t\)//g;s/\( \{2,\}\|\t\)$//g' | sed -e :a -e "s/^.\{1,$(($__Column - 1))\}$/ &/;ta"
	elif [ "$2" == center ]; then
		# Alinhamento: Centralizado
		# Limpa a formatação da 'expressão' substituindo todos os 
		# 'multiplos espaços consecutivos' e 'tabulações' do inicio da linha por um 'único espaço'
		# Insere 'espaços' no inicio e fim da 'expressão' até que o número de substituições seja igual a '__Column'
		echo "$1" | sed 's/\( \{2,\}\|\t\)/ /g' | sed -e :a -e "s/^.\{1,$(($__Column - 2))\}$/ & /;ta"
	else
		error_exit $BASH_LINENO $FUNCNAME "'$2' Método de alinhamento inválido."
	fi

	# status
	return 0

}

# Exporta as funções 
export -f ${__STR_LIST__[*]}
