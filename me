#!/bin/bash

# ------------------------------------------------------------------------------
#	Biblioteca: me (Instruções reservadas)
#	Criado por: Juliano Santos 
#	Data: 16 de Julho de 2016
#	Email: juliano.santos.bm@gmail.com
# ------------------------------------------------------------------------------
# Checa se biblioteca já foi inicilizada
if me.__INIT__ 2>/dev/null; then
	return 0;fi

# Delimitador
#export IFS='|'

# Documentação
declare -r __DOC_DIR__="../doc"

# Nome do script 
declare -r __SCRIPT__=$(basename "$0")

# Contantes
declare -r __ME_LIBRARY__=me

# Instruções
declare -ar __ME_LIST__=(
me.__INIT__
me.__DOC__
me.__PROC__
me.__USER__
me.__UID__
me.__EXEC__
me.__BASH__
me.__LANG__
me.__SESSION__
me.__NAME__
me.__LIST__
me.__PID__
)

function me.__INIT__() { return 0; } 
function me.__DOC__() { echo "$1.hlp"; return 0; }
function me.__PROC__(){ echo "$$"; return 0; } 
function me.__USER__(){ echo $USER; return 0; }
function me.__UID__(){ echo $UID; return 0; }
function me.__EXEC__(){ ps -q $(me.__PROC__) -o comm=; return 0; }
function me.__BASH__(){ echo $BASH; return 0;} 
function me.__LANG__(){ echo $LANGUAGE; return 0; }
function me.__SESSION__(){ echo $XDG_SESSION_DESKTOP; return 0; }
function me.__NAME__() { echo $__ME_LIBRARY__; }
function me.__LIST__() { echo ${__ME_LIST__[*]}; }
function me.__PID__() { echo $BASHPID; }


declare -ra __CLASS_LIB=(str var array dict struct)
#trap 'echo ‘$BASH_COMMAND’ failed with error code $?' ERR

#function error_exit()
#{
    # error_exit biblioteca linha função mensagem
    # Se a mensagem de erro não for passada em '$3', exibe a mensagem default
   
#	echo "$__SCRIPT__: linha $1: $2: ${3:-"Erro desconhecido."}" 1>&2
#	exit 1
#}

function me.__HELP__()
{
	# me.__HELP__ library categoria...
	#
	# local da documentação
	__DOC_FILE__="$__DOC_DIR__/${1%%.*}.hlp"
	__FUNC__=$1
	
	# Verifica o número de argumentos 
	if [ ${#*} -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME "Requer argumento."
	elif [ ! -e "$__DOC_FILE__" ]; then
		error_exit $BASH_LINENO $FUNCNAME "'$1' Documentação não encontrada."
	elif [ $(egrep -c1 -w -o -m1 "@FUNCTION $__FUNC__$" $__DOC_FILE__) -eq 0 ]; then
		error_exit $BASH_LINENO $FUNCNAME "'$1' Função não possue documentação."
	fi
	
	# Armazena em 'Where' todos os argumentos apartir da posição 2
	local Where=${*:2}
	Where=${Where:-"all"}	# Se 'Where' for nulo, define o valo padrão = 'all'
	
	# Lẽ os elementos de 'Where'
	for where in ${Where[*]}
	do
		case "$where" in
			"library")
				echo Biblioteca:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@LIBRARY/,/^.@LIBRARY/p" | \
					  sed '/\(^.@\|^@\)/d')"
				;;
			"sintax")
				echo Sintaxe:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@SINTAX/,/^.@SINTAX/p" | \
					  sed '/\(^.@\|^@\)/d')"
				
				;;
			"description")
				echo Descrição:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@DESCRIPTION/,/^.@DESCRIPTION/p" | \
					  sed '/\(^.@\|^@\)/d')"
				;;
			"argument")
				echo 'Argumento(s):'; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@ARGUMENT/,/^.@ARGUMENT/p" | \
					  sed '/\(^.@\|^@\)/d')"
				;;
			"return")
				echo Retorno:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@RETURN/,/^.@RETURN/p" | \
					  sed '/\(^.@\|^@\)/d')"
				;;
			"example")
				echo Exemplo:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@EXAMPLE/,/^.@EXAMPLE/p" | \
					  sed '/\(^.@\|^@\)/d')"
				;;
			all)
				echo Biblioteca:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@LIBRARY/,/^.@LIBRARY/p" | \
					  sed '/\(^.@\|^@\)/d')"
				echo Sintaxe:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@SINTAX/,/^.@SINTAX/p" | \
					  sed '/\(^.@\|^@\)/d')"
				echo Descrição:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@DESCRIPTION/,/^.@DESCRIPTION/p" | \
					  sed '/\(^.@\|^@\)/d')"
				echo 'Argumento(s):'; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@ARGUMENT/,/^.@ARGUMENT/p" | \
					  sed '/\(^.@\|^@\)/d')"
				echo Retorno:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@RETURN/,/^.@RETURN/p" | \
					  sed '/\(^.@\|^@\)/d')"
				echo Exemplo:; echo -e "$(cat "$__DOC_FILE__" | \
					  sed -n "/^@FUNCTION $__FUNC__/,/^.@FUNCTION/!d;/^@EXAMPLE/,/^.@EXAMPLE/p" | \
					  sed '/\(^.@\|^@\)/d')"
				break
				;;
			*)	
				error_exit $BASH_LINENO $FUNCNAME "'$where' Categoria não encontrada."
				;;
		esac
	done

	# Status
	return 0	
				
}

# Funções somente leitura
declare -rxf ${__ME_LIST__[*]}

# alias 
alias int="declare -i \$*"
alias dict="declare -A \$*"

